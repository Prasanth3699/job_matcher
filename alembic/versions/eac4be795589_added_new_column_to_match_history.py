"""added new column to match_history

Revision ID: eac4be795589
Revises: 77a457873de8
Create Date: 2025-05-01 19:39:40.329087

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'eac4be795589'
down_revision: Union[str, None] = '77a457873de8'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_model_active_type', table_name='model_versions')
    op.drop_index('ix_model_versions_activated_at', table_name='model_versions')
    op.drop_index('ix_model_versions_created_at', table_name='model_versions')
    op.drop_index('ix_model_versions_is_active', table_name='model_versions')
    op.drop_index('ix_model_versions_model_type', table_name='model_versions')
    op.drop_index('ix_model_versions_version_name', table_name='model_versions')
    op.drop_table('model_versions')
    op.drop_index('idx_resume_user_created', table_name='resumes')
    op.drop_index('ix_resumes_created_at', table_name='resumes')
    op.drop_index('ix_resumes_original_filename', table_name='resumes')
    op.drop_index('ix_resumes_user_id', table_name='resumes')
    op.drop_table('resumes')
    op.add_column('match_history', sa.Column('parsed_resume_id', sa.Integer(), nullable=True))
    op.alter_column('match_history', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('match_history', 'job_ids',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               nullable=False)
    op.alter_column('match_history', 'preferences',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               nullable=False)
    op.alter_column('match_history', 'results',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               nullable=False)
    op.alter_column('match_history', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.create_index(op.f('ix_match_history_parsed_resume_id'), 'match_history', ['parsed_resume_id'], unique=False)
    op.create_index(op.f('ix_match_history_user_id'), 'match_history', ['user_id'], unique=False)
    op.create_index('ix_match_history_user_id_created_at', 'match_history', ['user_id', 'created_at'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_match_history_user_id_created_at', table_name='match_history')
    op.drop_index(op.f('ix_match_history_user_id'), table_name='match_history')
    op.drop_index(op.f('ix_match_history_parsed_resume_id'), table_name='match_history')
    op.alter_column('match_history', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('match_history', 'results',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               nullable=True)
    op.alter_column('match_history', 'preferences',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               nullable=True)
    op.alter_column('match_history', 'job_ids',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               nullable=True)
    op.alter_column('match_history', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_column('match_history', 'parsed_resume_id')
    op.create_table('resumes',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('original_filename', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('file_path', sa.VARCHAR(length=512), autoincrement=False, nullable=True),
    sa.Column('file_size', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('parsed_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='resumes_pkey')
    )
    op.create_index('ix_resumes_user_id', 'resumes', ['user_id'], unique=False)
    op.create_index('ix_resumes_original_filename', 'resumes', ['original_filename'], unique=False)
    op.create_index('ix_resumes_created_at', 'resumes', ['created_at'], unique=False)
    op.create_index('idx_resume_user_created', 'resumes', ['user_id', 'created_at'], unique=False)
    op.create_table('model_versions',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('version_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('model_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('storage_path', sa.VARCHAR(length=512), autoincrement=False, nullable=True),
    sa.Column('metrics', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('description', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('activated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='model_versions_pkey')
    )
    op.create_index('ix_model_versions_version_name', 'model_versions', ['version_name'], unique=True)
    op.create_index('ix_model_versions_model_type', 'model_versions', ['model_type'], unique=False)
    op.create_index('ix_model_versions_is_active', 'model_versions', ['is_active'], unique=False)
    op.create_index('ix_model_versions_created_at', 'model_versions', ['created_at'], unique=False)
    op.create_index('ix_model_versions_activated_at', 'model_versions', ['activated_at'], unique=False)
    op.create_index('idx_model_active_type', 'model_versions', ['is_active', 'model_type'], unique=False)
    # ### end Alembic commands ###
