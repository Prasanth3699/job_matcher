from pydantic import BaseModel, Field, HttpUrl
from typing import Dict, List, Any, Optional


class JobDetails(BaseModel):
    job_title: str
    company_name: str
    location: str
    job_type: str
    apply_link: Optional[str] = (
        None  # Use HttpUrl for validation, make optional if sometimes missing
    )

    class Config:
        from_attributes = True


class JobMatchResult(BaseModel):
    job_id: str  # The ID generated by the matching process (often a hash)
    original_job_id: Optional[int] = None
    overall_score: float
    score_breakdown: Dict[str, Any] = Field(default_factory=dict)
    missing_skills: List[str] = Field(default_factory=list)
    matching_skills: List[str] = Field(default_factory=list)
    explanation: str
    job_details: JobDetails

    class Config:
        from_attributes = True


class MatchResponse(BaseModel):
    matches: List[JobMatchResult]
    parsed_resume_id: Optional[int] = None

    class Config:
        from_attributes = True


class MatchErrorResponse(BaseModel):
    detail: str
    error_type: str
    context: Optional[str] = None
    solution: Optional[str] = None
